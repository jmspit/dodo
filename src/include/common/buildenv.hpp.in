#ifndef dodo_common_buildenv_hpp
#define dodo_common_buildenv_hpp

#include <sstream>

namespace dodo {

  /**
   * Build information, generated by cmake during builds from buildenv.hpp.in.
   *
   *   - CMAKE_CXX_COMPILER_ID @CMAKE_CXX_COMPILER_ID@
   *   - CMAKE_CXX_COMPILER_VERSION @CMAKE_CXX_COMPILER_VERSION@
   *   - CMAKE_SYSTEM @CMAKE_SYSTEM@
   *   - CMAKE_SYSTEM_PROCESSOR @CMAKE_SYSTEM_PROCESSOR@
   *   - PROJECT_NAME @PROJECT_NAME@
   *   - PROJECT_VERSION_STR @PROJECT_VERSION_STR@
   *   - CMAKE_VERSION @CMAKE_VERSION@
   *   - CMAKE_BUILD_TYPE @CMAKE_BUILD_TYPE@
   */
  class BuildEnv {
    public:
      /**
       * Get the C++ compiler id, see https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html.
       * @return CMAKE_CXX_COMPILER_ID.
       */
      static std::string getCompilerId() { return "@CMAKE_CXX_COMPILER_ID@"; }

      /**
       * Get the compiler version.
       * @return CMAKE_CXX_COMPILER_VERSION.
       */
      static std::string getCompilerVersion() { return "@CMAKE_CXX_COMPILER_VERSION@"; }

      /**
       * Get the compiler host.
       * @return CMAKE_SYSTEM.
       */
      static std::string getBuildSystem() { return "@CMAKE_SYSTEM@"; }

      /**
       * Get the build target / architecture.
       * @return CMAKE_SYSTEM_PROCESSOR.
       */
      static std::string getBuildTarget() { return "@CMAKE_SYSTEM_PROCESSOR@"; }

      /**
       * Get the project name.
       * @return PROJECT_NAME.
       */
      static std::string getProjectName() { return "@PROJECT_NAME@"; }

      /**
       * Get the project version.
       * @return PROJECT_VERSION_STR.
       */
      static std::string getProjectVersion() { return "@PROJECT_VERSION_STR@"; }

      /**
       * Get the project version major.
       * @return PROJECT_VERSION_MAJOR.
       */
      static int         getProjectVersionMajor() { return @PROJECT_VERSION_MAJOR@; }

      /**
       * Get the project version minor.
       * @return PROJECT_VERSION_MINOR.
       */
      static int         getProjectVersionMinor() { return @PROJECT_VERSION_MINOR@; }

      /**
       * Get the project version patch.
       * @return PROJECT_VERSION_PATCH.
       */
      static int         getProjectVersionPatch() { return @PROJECT_VERSION_PATCH@; }

      /**
       * Get the cmake version.
       * @return CMAKE_VERSION.
       */
      static std::string getCMakeVersion() { return "@CMAKE_VERSION@"; }

      /**
       * Get the build type.
       * @return CMAKE_BUILD_TYPE.
       */
      static std::string getCMakeBuildType() { return "@CMAKE_BUILD_TYPE@"; }

      /**
       * Get the build date.
       * @return __DATE__.
       */
      static std::string getBuildDate() { return __DATE__; }

      /**
       * Get the build time.
       * @return __TIME__.
       */
      static std::string getBuildTime() { return __TIME__; }

      /**
       * In rare cases (examples requiring artefacts build in source checkouts), this is usefull.
       * @return The source directory.
       */
      static std::string getSourceDirectory() { return "@CMAKE_CURRENT_SOURCE_DIR@/src"; }

      /**
       * In very rare cases (examples requiring artefacts build in source checkouts), this is usefull.
       * @return The source directory.
       */
      static std::string getBinaryDirectory() { return "@CMAKE_CURRENT_BINARY_DIR@"; }

      /**
       * C++ standard enum.
       */
      enum cppStandard {
        stUnknown,  /**< Unknown C++ standard. */
        stPreCpp11, /**< Before C++11. */
        stCpp11,    /**< C++ 11. */
        stCpp14,    /**< C++ 14. */
        stCpp17     /**< C++ 17. */
      };

      /**
       * Get the C++ standard in effect during compiling as a string.
       * @return The cppStandard as a string.
       */
      static std::string getCppStandardString() {
        switch ( getCppStandard() ) {
          case stUnknown: return "unknown";
          case stPreCpp11: return "before C++11";
          case stCpp11: return "C++11";
          case stCpp14: return "C++14";
          case stCpp17: return "C++17";
          default: return "invalid cppStandard";
        }
      };

      /**
       * Get the C++ standard in effect during compiling.
       * @return The cppStandard.
       */
      static cppStandard getCppStandard() {
        if ( __cplusplus == 199711L ) return stPreCpp11;
        else if ( __cplusplus == 201103L ) return stCpp11;
        else if ( __cplusplus == 201402L ) return stCpp14;
        else if ( __cplusplus == 201703L ) return stCpp17;
        else return stUnknown;
      };

      /**
       * Get a description of the build environment.
       * @return The description.
       */
      static std::string getDescription() {
        std::stringstream ss;
        ss << "project          : " << getProjectName() << " " << getProjectVersion() << std::endl;
        ss << "C++ standard     : " << getCppStandardString() << std::endl;
        ss << "cmake version    : " << getCMakeVersion() << std::endl;
        ss << "compiler         : " << getCompilerId() << " " << getCompilerVersion() << std::endl;
        ss << "build type       : " << getCMakeBuildType() << std::endl;
        ss << "build on         : " << getBuildSystem() << std::endl;
        ss << "build date       : " << getBuildDate() << " " << getBuildTime() << std::endl;
        ss << "target arch      : " << getBuildTarget() << std::endl;
        ss << "source directory : " << getSourceDirectory() << std::endl;
        ss << "binary directory : " << getBinaryDirectory() << std::endl;
        return ss.str();
      }
  };

}

#endif