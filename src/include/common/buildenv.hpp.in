#ifndef dodo_common_buildenv_hpp
#define dodo_common_buildenv_hpp

#include <sstream>

namespace dodo {

  /**
   * Build information, generated by cmake during builds from buildenv.hpp.in.
   *
   *   - CMAKE_CXX_COMPILER_ID @CMAKE_CXX_COMPILER_ID@
   *   - CMAKE_CXX_COMPILER_VERSION @CMAKE_CXX_COMPILER_VERSION@
   *   - CMAKE_SYSTEM @CMAKE_SYSTEM@
   *   - CMAKE_SYSTEM_PROCESSOR @CMAKE_SYSTEM_PROCESSOR@
   *   - PROJECT_NAME @PROJECT_NAME@
   *   - PROJECT_VERSION_STR @PROJECT_VERSION_STR@
   *   - CMAKE_VERSION @CMAKE_VERSION@
   *   - CMAKE_BUILD_TYPE @CMAKE_BUILD_TYPE@
   */
  class BuildEnv {
    public:
      /**
       * Get the C++ compiler id, see https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html.
       * @return CMAKE_CXX_COMPILER_ID.
       */
      static std::string getCompilerId() { return "@CMAKE_CXX_COMPILER_ID@"; };

      /**
       * Get the compiler version.
       * @return CMAKE_CXX_COMPILER_VERSION.
       */
      static std::string getCompilerVersion() { return "@CMAKE_CXX_COMPILER_VERSION@"; };

      static std::string getBuildSystem() { return "@CMAKE_SYSTEM@"; };
      static std::string getBuildTarget() { return "@CMAKE_SYSTEM_PROCESSOR@"; };
      static std::string getProjectName() { return "@PROJECT_NAME@"; };
      static std::string getProjectVersion() { return "@PROJECT_VERSION_STR@"; };
      static int         getProjectVersionMajor() { return @PROJECT_VERSION_MAJOR@; };
      static int         getProjectVersionMinor() { return @PROJECT_VERSION_MINOR@; };
      static int         getProjectVersionPatch() { return @PROJECT_VERSION_PATCH@; };
      static std::string getCMakeVersion() { return "@CMAKE_VERSION@"; };
      static std::string getCMakeBuildType() { return "@CMAKE_BUILD_TYPE@"; };
      static std::string getBuildDate() { return __DATE__; };
      static std::string getBuildTime() { return __TIME__; };

      /**
       * C++ standard enum.
       */
      enum cppStandard {
        stUnknown,  /**< Unknown C++ standard. */
        stPreCpp11, /**< Before C++11. */
        stCpp11,    /**< C++ 11. */
        stCpp14,    /**< C++ 14. */
        stCpp17     /**< C++ 17. */
      };

      static std::string getCppStandardString() {
        switch ( getCppStandard() ) {
          case stUnknown: return "unknown";
          case stPreCpp11: return "before C++11";
          case stCpp11: return "C++11";
          case stCpp14: return "C++14";
          case stCpp17: return "C++17";
          default: return "invalid cppStandard";
        }
      };

      static cppStandard getCppStandard() {
        if ( __cplusplus == 199711L ) return stPreCpp11;
        else if ( __cplusplus == 201103L ) return stCpp11;
        else if ( __cplusplus == 201402L ) return stCpp14;
        else if ( __cplusplus == 201703L ) return stCpp17;
        else return stUnknown;
      };

      static std::string getDescription() {
        std::stringstream ss;
        ss << "project          : " << getProjectName() << " " << getProjectVersion() << std::endl;
        ss << "C++ standard     : " << getCppStandardString() << std::endl;
        ss << "cmake version    : " << getCMakeVersion() << std::endl;
        ss << "compiler         : " << getCompilerId() << " " << getCompilerVersion() << std::endl;
        ss << "build type       : " << getCMakeBuildType() << std::endl;
        ss << "build on         : " << getBuildSystem() << std::endl;
        ss << "build date       : " << getBuildDate() << " " << getBuildTime() << std::endl;
        ss << "target arch      : " << getBuildTarget() << std::endl;
        return ss.str();
      }
  };

}

#endif